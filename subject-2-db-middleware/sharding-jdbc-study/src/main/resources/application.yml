
sharding:
  jdbc:
    datasource:
      names: ds0,ds1
      ds0: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db1?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
        username: mike
        password: Mike666!
        maxPoolSize: 50
        minPoolSize: 1
      ds1: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db2?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
        username: mike
        password: Mike666!
        maxPoolSize: 50
        minPoolSize: 1
    config:
      sharding:
        tables: 
           t_order: 
             actual-data-nodes: ds$->{0..1}.t_order$->{0..1}
             database-strategy: 
               standard: 
                 sharding-column: order_time
                 preciseAlgorithmClassName: com.study.mike.sharding.jdbc.sharding.OrderTimePreciseShardingAlgorithm
               #inline:
                 #sharding-column: customer_id
                 #algorithm-expression: ds$->{customer_id % 2}
             table-strategy: 
               inline:
                 sharding-column: order_id
                 algorithm-expression: t_order$->{order_id % 2} 
             keyGeneratorColumnName: order_id
             #key-generator-column-name: order_id
             #keyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
        default-data-source-name: ds0
        #defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
        #defaultKeyGenerator:
          #type: SNOWFLAKE
      props:
        sql.show: true
        
        
mybatis:
  configuration:
    map-underscore-to-camel-case: true

        
        
 
      

