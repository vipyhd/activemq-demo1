
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    upstream app_servers {
	server 192.168.100.242:9999;
	server 192.168.100.241:9999;
    }
    lua_package_path "/usr/local/lib/lua/?.lua;;/usr/local/nginx-1.14.2/lua_scripts/?.lua;;";

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location /lua {
            content_by_lua_block {
               local mydata = require "mydata"
               ngx.say(mydata.get_age("dog"))
            }
        }
        
        location /get-msg {
            content_by_lua_block {
                local request_method = ngx.var.request_method
                local args = nil
                local key = nil
                local value = nil
                
                if "GET" == request_method then
                  args = ngx.req.get_uri_args()
                elseif "POST" == request_method then
                  ngx.req.read_body()
                args = ngx.req.get_post_args()
                end

                key = args["key"]

                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                 local res, err = red:get(key) 
                if not res then 
                  ngx.say("failed to get "..key..": ", err) 
                  return 
                end 
 
                if res == ngx.null then 
                  ngx.say(key.." not found.") 
                  return 
                end 

                ngx.say("get from redis >>> "..key..": ", res) 
                local ok, err = red:close() 
                if not ok then 
                  ngx.say("failed to close:", err) 
                return 
                end
            }
        }

        location / {
            proxy_set_header Host $http_host;       
            proxy_pass http://app_servers; 
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
